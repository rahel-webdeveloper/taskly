export const markdownText =
  'The "best" code can be subjective, as it often depends on the context in which it is used, the problem being solved, and the practices of the team involved. However, there are some common characteristics that often define high-quality code:\n\n### Characteristics of High-Quality Code\n\n1. **Readability**: The code is easy to read and understand. It uses meaningful names for variables and functions, and its structure is logical and well-organized.\n\n2. **Simplicity**: The code is as simple as possible while still achieving its goals. It avoids unnecessary complexity and adheres to the principle of KISS (Keep It Simple, Stupid).\n\n3. **Reusability**: The code is modular and components can be reused in different parts of the application or even across different projects. \n\n4. **Testability**: The code is easy to test, with a clear structure that allows for unit testing and integration testing. \n\n5. **Performance**: It efficiently uses resources, minimizing time and space complexity where appropriate without sacrificing clarity.\n\n6. **Maintainability**: The code is easy to maintain and extend. Good documentation and clear comments help future developers understand the codebase.\n\n7. **Adherence to Standards**: It follows coding standards and conventions relevant to the language or framework being used.\n\n### Advice for Software Engineers\n\n1. **Continuous Learning**: The tech landscape is always changing. Stay updated with new languages, frameworks, and best practices, but also focus on mastering the fundamentals.\n\n2. **Emphasize Code Quality**: Prioritize writing clean, maintainable, and well-documented code. Invest time in code reviews, automated testing, and refactoring.\n\n3. **Collaborate and Communicate**: Work closely with other team members. Share knowledge, ask questions, and seek feedback. Good communication often leads to better solutions.\n\n4. **Version Control**: Use version control systems (like Git) effectively. Understand branching, merging, and commit practices. This will save you time and frustration.\n\n5. **Understand the Problem**: Take the time to fully understand the problem before jumping into coding. Plan your approach and think through the implications of your design.\n\n6. **Write Tests**: Learn and practice writing tests for your code. Automated tests save time in the long run and help ensure that future changes don’t break existing functionality.\n\n7. **Prioritize Security**: Understand common security vulnerabilities in your stack (like SQL injection, XSS, etc.) and write your code with security best practices in mind.\n\n8. **Seek Feedback**: Don’t hesitate to ask for feedback on your code and development practices. Constructive criticism helps you grow.\n\n### Example of Quality Code\n\nConsider the following succinct and clear Python function which calculates the factorial of a number:\n\n```python\ndef factorial(n):\n    """Return the factorial of a non-negative integer n."""\n    if n < 0:\n        raise ValueError("Input must be a non-negative integer.")\n    return 1 if n == 0 else n * factorial(n - 1)\n```\n\n- **Readability**: The function name and docstring clearly describe its purpose.\n- **Simplicity**: It uses recursion in a straightforward manner.\n- **Error Handling**: It raises an exception for invalid input, improving robustness.\n- **Testability**: This function can be easily tested with various input values.\n\nIn summary, writing high-quality code is about balancing various factors and focusing on the long-term health of your codebase. Aim to continually improve your skills and practices throughout your career.';
